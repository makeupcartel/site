define([
    "jquery",
    'Magento_Checkout/js/model/quote',
    'Magento_Checkout/js/model/shipping-rate-processor/new-address',
    'Magento_Checkout/js/model/shipping-rate-registry',
    "Magento_Checkout/js/action/set-shipping-information",
    "Magento_Customer/js/customer-data",
    "Amasty_Promo/js/popup",
    "domReady!"
], function($, quote, defaultProcessor, rateRegistry, getTotalsAction, customerData) {
    var defaultProcessor = defaultProcessor,
        rateRegistry = rateRegistry;
    function initCart(q, t, c) {
        $("#shopping-cart-table .plus").click(function() {
            var e = parseInt($(this).parent().find(".input-text.qty").val());
            $(this).parent().find(".input-text.qty").val(e + 1), updateCart(q, t, c)
        }), $("#shopping-cart-table .minus").click(function() {
            var e = parseInt($(this).parent().find(".input-text.qty").val());
            e > 1 && ($(this).parent().find(".input-text.qty").val(e - 1), updateCart(q, t, c))
        }), $("#shopping-cart-table input.input-text.qty").focusout(function() {
            var e = parseInt($(this).attr("data-cart-item-qty")),
                r = parseInt($(this).attr("value"));
            r != e && e > 0 ? updateCart(q, t, c) : $(this).val(r)
        }), $("#shopping-cart-table input.input-text.qty").keydown(function(e) {
            if (13 == e.keyCode) {
                var r = parseInt($(this).attr("data-cart-item-qty")),
                    qty = parseInt($(this).val());
                qty != r && r > 0 ? updateCart(q, t, c) : $(this).val(r);
                return false;
            }
        })
    }

    function updateCart(quote, getTotalsAction, customerData) {
        var form = $("form#form-validate");
        $.ajax({
            url: form.attr("action"),
            data: form.serialize(),
            showLoader: !0,
            success: function(t) {
                var a = $.parseHTML(t.cart),
                    e = $(a).find("#form-validate"),
                    o = $.parseHTML(t.reward_point);
                $("#form-validate").replaceWith(e),
                    $(".message.info.reward.reward-checkout").replaceWith(o),
                    customerData.reload(["cart", "messages"], !0);
                if(quote.shippingMethod() !== null){
                    getTotalsAction().done()
                }
                reloadShippingRate(quote)
                initCart(quote, getTotalsAction, customerData)
                $('.cart-summary .block .item-options .field .radio').focus();
                $('.cart-summary .block .item-options .field .radio').trigger('click');
            },
            error: function(xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                console.log(err.Message)
            }
        })
    }
    
    function reloadShippingRate(quote){
        var type = quote.shippingAddress().getType();
        var rateProcessors = [],
            totalsProcessors = [];
        // update rates list when estimated address was set
        rateProcessors['default'] = defaultProcessor;
        rateRegistry.set(quote.shippingAddress().getCacheKey(), '');
        
        rateProcessors[type] ?
                rateProcessors[type].getRates(quote.shippingAddress()) :
                rateProcessors['default'].getRates(quote.shippingAddress());
    }

    $(document).ready(function() {
        initCart(quote, getTotalsAction, customerData)
    })
});